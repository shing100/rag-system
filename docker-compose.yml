version: '3.8'

services:
  # 프론트엔드 애플리케이션 (Remix)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3010:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - API_URL=http://localhost:4010
    depends_on:
      - api-gateway
    networks:
      - rag-network

  # API 게이트웨이
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile.dev
    ports:
      - "4010:4000"
    volumes:
      - ./backend/api-gateway:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4000
      - AUTH_SERVICE_URL=http://auth-service:4001
      - USER_SERVICE_URL=http://user-service:4002
      - PROJECT_SERVICE_URL=http://project-service:4003
      - DOCUMENT_SERVICE_URL=http://document-service:4004
      - RAG_SERVICE_URL=http://rag-service:4005
      - ANALYTICS_SERVICE_URL=http://analytics-service:4006
      - REDIS_URL=redis://redis:6379
    depends_on:
      - auth-service
      - project-service
      - document-service
      - redis
    networks:
      - rag-network

  # 인증 서비스
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile.dev
    ports:
      - "4001:4001"
    volumes:
      - ./backend/auth-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4001
      - POSTGRES_URI=postgres://postgres:postgres@postgres:5432/rag_auth
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=development_jwt_secret
      - JWT_EXPIRES_IN=1d
    depends_on:
      - postgres
      - redis
    networks:
      - rag-network

  # 프로젝트 서비스
  project-service:
    build:
      context: ./backend/project-service
      dockerfile: Dockerfile.dev
    ports:
      - "4003:4003"
    volumes:
      - ./backend/project-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4003
      - POSTGRES_URI=postgres://postgres:postgres@postgres:5432/rag_projects
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - rag-network

  # 문서 서비스
  document-service:
    build:
      context: ./backend/document-service
      dockerfile: Dockerfile.dev
    ports:
      - "4004:4004"
    volumes:
      - ./backend/document-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4004
      - POSTGRES_URI=postgres://postgres:postgres@postgres:5432/rag_documents
      - REDIS_URL=redis://redis:6379
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minio
      - S3_SECRET_KEY=minio123
      - S3_BUCKET=rag-documents
      - RAG_SERVICE_URL=http://rag-service:4005
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - rag-network

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=rag_auth,rag_users,rag_projects,rag_documents,rag_queries,rag_analytics
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/create-multiple-postgres-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgres-databases.sh
    networks:
      - rag-network

  # OpenSearch (벡터 검색)
  opensearch:
    image: opensearchproject/opensearch:2.6.0
    ports:
      - "9200:9200"
      - "9600:9600"
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    networks:
      - rag-network

  # Redis (캐싱 및 큐)
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - rag-network

  # MinIO (S3 호환 스토리지)
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - rag-network

  # MinIO Client (버킷 자동 생성)
  minio-client:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add myminio http://minio:9000 minio minio123;
      /usr/bin/mc mb --ignore-existing myminio/rag-documents;
      /usr/bin/mc policy set public myminio/rag-documents;
      exit 0;
      "
    networks:
      - rag-network

volumes:
  postgres-data:
  opensearch-data:
  redis-data:
  minio-data:

networks:
  rag-network:
    driver: bridge
